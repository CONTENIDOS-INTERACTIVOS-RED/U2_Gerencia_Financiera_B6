{"remainingRequest":"/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/src/views/curso/Tema1.vue?vue&type=template&id=77aebbce&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/src/views/curso/Tema1.vue","mtime":1743314482241},{"path":"/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Financiera_B6/U2_Gerencia_Financiera_B6/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gSGVycmFtaWVudGFzIGRlIGFuw6FsaXNpcyBmaW5hbmNpZXJvJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTYubWItMwogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTMgCiAgICAgICAgLnJvdy5tYi01CiAgICAgICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgIC5jb2wtbGctOC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICAuYmctY29sb3ItMi5wLTQubWItMyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgICAgICBwLm1iLTAgRW4gbGEgYWRtaW5pc3RyYWNpw7NuIGRlIGVtcHJlc2FzLCBsYXMgaGVycmFtaWVudGFzIGRlIGFuw6FsaXNpcyBmaW5hbmNpZXJvIHNvbiBlc2VuY2lhbGVzIHBhcmEgZXZhbHVhciBsYSBzaXR1YWNpw7NuIGVjb27Ds21pY2EgZGUgdW5hIG9yZ2FuaXphY2nDs24geSBmYWNpbGl0YXIgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVzdHJhdMOpZ2ljYXMuIFBlcm1pdGVuIGV4YW1pbmFyIGRhdG9zIGZpbmFuY2llcm9zLCBpZGVudGlmaWNhciB0ZW5kZW5jaWFzIHkgcmVhbGl6YXIgY29tcGFyYWNpb25lcyBxdWUgb3B0aW1pemFuIGxhIGdlc3Rpw7NuIGVtcHJlc2FyaWFsLgogICAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBBbGd1bmFzIGRlIGxhcyBoZXJyYW1pZW50YXMgbcOhcyByZWxldmFudGVzIGluY2x1eWVuOgogICAgICAgICAgICBwLm1iLTAgPGI+SW5kaWNhZG9yZXMgZmluYW5jaWVyb3M6PC9iPiBFdmFsw7phbiBhc3BlY3RvcyBjbGF2ZSBjb21vOgoKICAgICAgICBkaXYucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBMaXF1aWRlegogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBNaWRlIGxhIGNhcGFjaWRhZCBkZSBsYSBlbXByZXNhIHBhcmEgY3VtcGxpciBjb24gb2JsaWdhY2lvbmVzIGEgY29ydG8gcGxhem8uCiAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzQuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBSZW50YWJpbGlkYWQKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgQW5hbGl6YSBsYSBlZmljaWVuY2lhIGVuIGxhIGdlbmVyYWNpw7NuIGRlIHV0aWxpZGFkZXMgZW4gcmVsYWNpw7NuIGNvbiB2ZW50YXMgbyBpbnZlcnNpb25lcy4KICAgICAgICAKICAgICAgICAgIGRpdi5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvNS5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIFNvbHZlbmNpYQogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBEZXRlcm1pbmEgbGEgY2FwYWNpZGFkIGRlIGxhIGVtcHJlc2EgcGFyYSBhZnJvbnRhciBjb21wcm9taXNvcyBmaW5hbmNpZXJvcyBhIGxhcmdvIHBsYXpvLgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci03Lm1iLTMucHgtNS5wdC01Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctOChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItMy5tYi1sZy0wCiAgICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTgKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgPGI+QW7DoWxpc2lzIGRlIHRlbmRlbmNpYXM6PC9iPiBleGFtaW5hIGxvcyBkYXRvcyBmaW5hbmNpZXJvcyBlbiBkaXN0aW50b3MgcGVyaW9kb3MgcGFyYSBkZXRlY3RhciBwYXRyb25lcyB5IHByZXZlciBlc2NlbmFyaW9zIGZ1dHVyb3MuCiAgICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci04CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkZsdWpvIGRlIGVmZWN0aXZvOjwvYj4gZXN0dWRpYSBsYXMgZW50cmFkYXMgeSBzYWxpZGFzIGRlIGRpbmVybyBlbiB1biBwZXJpb2RvIGVzcGVjw61maWNvLCBwcm9wb3JjaW9uYW5kbyBpbmZvcm1hY2nDs24gY2xhdmUgc29icmUgbGEgY2FwYWNpZGFkIGRlIGxhIGVtcHJlc2EgcGFyYSBnZW5lcmFyIGxpcXVpZGV6LgogICAgICAgICAgICAgICAgcC50ZXh0LWJvbGQgRWwgdXNvIGVmaWNpZW50ZSBkZSBlc3RhcyBoZXJyYW1pZW50YXMgbm8gc29sbyBwZXJtaXRlIGV2YWx1YXIgbGEgc2l0dWFjacOzbiBhY3R1YWwgZGUgbGEgb3JnYW5pemFjacOzbiwgc2lubyB0YW1iacOpbiBkaXNlw7FhciBlc3RyYXRlZ2lhcyBxdWUgb3B0aW1pY2VuIGNvc3RvcywgaW5jcmVtZW50ZW4gbGEgcmVudGFiaWxpZGFkIHkgcHJvbXVldmFuIGxhIHNvc3RlbmliaWxpZGFkIGVtcHJlc2FyaWFsLiBFbiB1biBlbnRvcm5vIGNvbXBldGl0aXZvLCBkb21pbmFyIGVzdGFzIGhlcnJhbWllbnRhcyBzZSBjb252aWVydGUgZW4gdW5hIGNvbXBldGVuY2lhIGluZGlzcGVuc2FibGUgcGFyYSBsb3MgcHJvZmVzaW9uYWxlcyBkZSBsYSBhZG1pbmlzdHJhY2nDs24uCiAgICAgICAgICAgICAgLmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICAgIGltZy5pbWctZmx1aWQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS82LnN2ZycsIHN0eWxlPSJtYXgtd2lkdGg6NDg2cHgiLCBhbHQ9IiIgKS5teC1hdXRvLm14LWxnLTAubXMtbGctYXV0by5tYi00Lm1iLWxnLTAKICAgICAgICAKCiAgICAjdF8xXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4xXSBDb25jZXB0byB5IG9iamV0aXZvcyBkZSBsYSBnZXJlbmNpYSBmaW5hbmNpZXJhCiAgICAKICAgIHAubWItNCBFbCBhbsOhbGlzaXMgZmluYW5jaWVybyBlcyBmdW5kYW1lbnRhbCBlbiBsYSBnZXJlbmNpYSBmaW5hbmNpZXJhLCB5YSBxdWUgZmFjaWxpdGEgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVzdHJhdMOpZ2ljYXMgZW4gw6FyZWFzIGNvbW8gaW52ZXJzacOzbiwgZmluYW5jaWFtaWVudG8geSBjb250cm9sIGRlIGNvc3Rvcy4gU3VzIHByaW5jaXBhbGVzIG9iamV0aXZvcyBzb246CgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNC5tYi0zLnB4LTUucHQtNS5tYi01CiAgICAgIC5weC00LnB4LW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTgoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTMubWItbGctMC5vcmRlci1sZy0yCiAgICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci04CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPk1lZGlyIGxhIHJlbnRhYmlsaWRhZDwvYj4gZGUgbGEgZW1wcmVzYSB5IHN1IGNhcGFjaWRhZCBwYXJhIGdlbmVyYXIgYmVuZWZpY2lvcy4KICAgICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci04CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkRldGVybWluYXIgbGEgbGlxdWlkZXo8L2I+IHkgZ2FyYW50aXphciBxdWUgbGEgb3JnYW5pemFjacOzbiBwdWVkYSBjdW1wbGlyIGNvbiBzdXMgb2JsaWdhY2lvbmVzIGEgY29ydG8gcGxhem8uCiAgICAgICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOAogICAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5FdmFsdWFyIGxhIHNvbHZlbmNpYTwvYj4gYSBsYXJnbyBwbGF6byBwYXJhIGFzZWd1cmFyIGVzdGFiaWxpZGFkIGZpbmFuY2llcmEuCiAgICAgICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOAogICAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5JZGVudGlmaWNhciBmb3J0YWxlemFzIHkgb3BvcnR1bmlkYWRlcyBkZSBtZWpvcmE8L2I+IGVuIGxhIGVzdHJ1Y3R1cmEgZmluYW5jaWVyYS4KICAgICAgICAgICAgICAgIHAgTGFzIGRlY2lzaW9uZXMgZmluYW5jaWVyYXMgc2UgYmFzYW4gZW4gaW5mb3JtYWNpw7NuIG9idGVuaWRhIGRlIGxvcyBlc3RhZG9zIGZpbmFuY2llcm9zLCBsb3MgY3VhbGVzIHBlcm1pdGVuIHByb3llY3RhciBlc2NlbmFyaW9zIGZ1dHVyb3MuCiAgICAgICAgICAgIAogICAgICAgICAgICAgIC5jb2wtbGctNChkYXRhLWFvcz0iem9vbS1pbiIpLm9yZGVyLWxnLTEKICAgICAgICAgICAgICAgIGltZy5pbWctZmx1aWQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS83LnN2ZycsIHN0eWxlPSJtYXgtd2lkdGg6NDg2cHgiLCBhbHQ9IiIgKS5teC1hdXRvLm14LWxnLTAubXMtbGctYXV0by5tYi00Lm1iLWxnLTAKICAgICAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBEb2N1bWVudG9zIGNsYXZlIGVuIGVsIGFuw6FsaXNpcyBmaW5hbmNpZXJvCiAgICBwLm1iLTUgRWwgYW7DoWxpc2lzIGZpbmFuY2llcm8gc2UgYXBveWEgZW4gdHJlcyBkb2N1bWVudG9zIGZ1bmRhbWVudGFsZXM6CgogICAgVGFic0MuY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi01CiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJCYWxhbmNlIGdlbmVyYWwiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzIuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yLmFsaWduLWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgIGg0IEJhbGFuY2UgZ2VuZXJhbAogICAgICAgICAgICBwIFByZXNlbnRhIGxvcyBhY3Rpdm9zLCBwYXNpdm9zIHkgcGF0cmltb25pbyBlbiB1biBtb21lbnRvIGVzcGVjw61maWNvLCBwZXJtaXRpZW5kbyBjb25vY2VyIGxhIGVzdGFiaWxpZGFkIGZpbmFuY2llcmEuCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzgucG5nJywgYWx0PScnKQogICAgCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJFc3RhZG8gZGUgcmVzdWx0YWRvcyIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvMi5zdmcnKSIpCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIuYWxpZ24tY29udGVudC1jZW50ZXIKICAgICAgICAgICAgaDQgRXN0YWRvIGRlIHJlc3VsdGFkb3MKICAgICAgICAgICAgcCBNdWVzdHJhIGluZ3Jlc29zLCBjb3N0b3MgeSBnYXN0b3MgZW4gdW4gcGVyaW9kbyBkZXRlcm1pbmFkbywgcmVmbGVqYW5kbyBzaSBsYSBlbXByZXNhIG9idGllbmUgdXRpbGlkYWRlcyBvIHDDqXJkaWRhcy4KICAgIAogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvOS5wbmcnLCBhbHQ9JycpCiAgICAKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkVzdGFkbyBkZSBmbHVqb3MgZGUgZWZlY3Rpdm8iIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzIuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yLmFsaWduLWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgIGg0IEVzdGFkbyBkZSBmbHVqb3MgZGUgZWZlY3Rpdm8KICAgICAgICAgICAgcCBSZWdpc3RyYSBsb3MgbW92aW1pZW50b3MgZGUgZGluZXJvIGRlbnRybyB5IGZ1ZXJhIGRlIGxhIGVtcHJlc2EsIGZhY2lsaXRhbmRvIGxhIGV2YWx1YWNpw7NuIGRlIGxhIGxpcXVpZGV6LgogICAgCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMC5wbmcnLCBhbHQ9JycsIHN0eWxlPSJ3aWR0aDogMTAwJTsiKQogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci01Lm1iLTQKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgLnJvdy5tYi01CiAgICAgICAgICAuY29sLWxnLTQub3JkZXItbGctMi5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTEucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgLmNvbC1sZy04Lm9yZGVyLWxnLTEKICAgICAgICAgICAgLmJnLWNvbG9yLTEucC01KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICAgIGg1IEVqZW1wbG8gcHLDoWN0aWNvCiAgICAgICAgICAgICAgcCBFbCBnZXJlbnRlIGZpbmFuY2llcm8gZGUgPGI+VGVjbm9sb2fDrWEgR2xvYmFsIFMuQS48L2I+IGRldGVjdGEgdW4gYXVtZW50byBkZWwgMzAgJSBlbiBpbmdyZXNvcyByZXNwZWN0byBhbCBhw7FvIGFudGVyaW9yLiBTaW4gZW1iYXJnbywgYWwgYW5hbGl6YXIgZWwgZXN0YWRvIGRlIHJlc3VsdGFkb3MsIHNlIG9ic2VydmEgcXVlIGxvcyBjb3N0b3Mgb3BlcmF0aXZvcyBjcmVjaWVyb24gdW4gMzUgJSwgYWZlY3RhbmRvIGxhIHJlbnRhYmlsaWRhZC4KICAgICAgICAgICAgICBwLm1iLTAgPGI+QWNjacOzbiBnZXJlbmNpYWw6PC9iPiBzZSByZWNvbWllbmRhIHJldmlzYXIgbGEgZXN0cnVjdHVyYSBkZSBjb3N0b3MgeSByZW5lZ29jaWFyIGNvbiBwcm92ZWVkb3JlcyBwYXJhIG1lam9yYXIgbG9zIG3DoXJnZW5lcyBzaW4gY29tcHJvbWV0ZXIgbGEgY2FsaWRhZCBkZWwgcHJvZHVjdG8uCiAgICAgICAgCiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEZ1bmNpw7NuIGVzdHJhdMOpZ2ljYSBkZWwgYW7DoWxpc2lzIGZpbmFuY2llcm8KICAgICAgICBwLm1iLTUgRWwgYW7DoWxpc2lzIGZpbmFuY2llcm8gbm8gc29sbyBwZXJtaXRlIGludGVycHJldGFyIGxhIHNpdHVhY2nDs24gYWN0dWFsIGRlIGxhIGVtcHJlc2EsIHNpbm8gcXVlIHRhbWJpw6luIGNvbnRyaWJ1eWUgYSBsYSBwbGFuaWZpY2FjacOzbiBlc3RyYXTDqWdpY2EgeSBsYSBnZXN0acOzbiBkZSByaWVzZ29zLgoKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzEyLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgSWRlbnRpZmljYWNpw7NuIGRlIHRlbmRlbmNpYXMKICAgICAgICAgICAgICAgIHAubWItMCBQZXJtaXRlIGRldGVjdGFyIHBhdHJvbmVzIGRlIGNyZWNpbWllbnRvIG8gY29udHJhY2Npw7NuIGVuIHZlbnRhcyB5IHV0aWxpZGFkZXMsIGZhY2lsaXRhbmRvIGRlY2lzaW9uZXMgc29icmUgZXhwYW5zacOzbiBvIHJlZHVjY2nDs24gZGUgY29zdG9zLgogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzEzLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgRXZhbHVhY2nDs24gZGUgcmllc2dvcwogICAgICAgICAgICAgICAgcC5tYi0wIEF5dWRhIGEgcHJldmVyIHByb2JsZW1hcyBmaW5hbmNpZXJvcyB5IGdlc3Rpb25hciBlbCBlbmRldWRhbWllbnRvIHkgbGEgbGlxdWlkZXouCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTQucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBQbGFuaWZpY2FjacOzbiBkZSBlc3RyYXRlZ2lhcyBmdXR1cmFzCiAgICAgICAgICAgICAgICBwLm1iLTAgUGVybWl0ZSBlc3RhYmxlY2VyIG1ldGFzIGZpbmFuY2llcmFzIGFsY2FuemFibGVzIHkgb3B0aW1pemFyIGNvc3RvcyBwYXJhIG1lam9yYXIgbGEgcmVudGFiaWxpZGFkLgoKICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIC5iZy1jb2xvci0yLnAtNS5tYi0zKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgaDUgRWplbXBsbyBwcsOhY3RpY28KICAgICAgICAgIHAgVW5hIGVtcHJlc2EgZGVsIHNlY3RvciA8Yj5yZXRhaWw8L2I+IGluY3JlbWVudGEgc3VzIHZlbnRhcyB1biA1MCAlLCBwZXJvIHN1IHV0aWxpZGFkIG5ldGEgY2FlIHVuIDEwICUgZGViaWRvIGFsIGF1bWVudG8gZGUgY29zdG9zIGZpam9zIHkgdmFyaWFibGVzLgogICAgICAgICAgcC5tYi0wIDxiPkFjY2nDs24gZ2VyZW5jaWFsOjwvYj4gc2UgcmVjb21pZW5kYSBhdXRvbWF0aXphciBwcm9jZXNvcywgb3B0aW1pemFyIGxhIGxvZ8Otc3RpY2EgeSBldmFsdWFyIHByb3ZlZWRvcmVzIHBhcmEgcmVkdWNpciBjb3N0b3Mgc2luIGFmZWN0YXIgbGEgb3BlcmFjacOzbi4KICAgICAgICBwIEVsIGFuw6FsaXNpcyBmaW5hbmNpZXJvIGVzIHVuYSBoZXJyYW1pZW50YSBjbGF2ZSBwYXJhIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlc3RyYXTDqWdpY2FzIHkgbGEgc29zdGVuaWJpbGlkYWQgZGUgbGEgZW1wcmVzYS4gU3UgY29ycmVjdGEgYXBsaWNhY2nDs24gcGVybWl0ZSBtYW50ZW5lciB1bmEgZXN0cnVjdHVyYSBmaW5hbmNpZXJhIHPDs2xpZGEsIHJlbnRhYmxlIHkgY29tcGV0aXRpdmEuCgogICAgI3RfMV8yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuMl0gQW7DoWxpc2lzIGhvcml6b250YWwgeSB2ZXJ0aWNhbCBkZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcwogICAgCiAgICBwLm1iLTQgRWwgYW7DoWxpc2lzIGRlIGxvcyBlc3RhZG9zIGZpbmFuY2llcm9zIGVzIGVzZW5jaWFsIGVuIGxhIGdlcmVuY2lhIGZpbmFuY2llcmEsIHlhIHF1ZSBwZXJtaXRlIGV2YWx1YXIgbGEgc2l0dWFjacOzbiBlY29uw7NtaWNhIGRlIGxhIGVtcHJlc2EgZGVzZGUgZGlmZXJlbnRlcyBlbmZvcXVlcy4gRXhpc3RlbiBkb3MgbcOpdG9kb3MgcHJpbmNpcGFsZXMgcGFyYSBlc3RlIGFuw6FsaXNpczoKCiAgICBUYWJzQy5jb2xvci1hY2VudG8tY29udGVuaWRvLm1iLTUKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkFuw6FsaXNpcyBob3Jpem9udGFsIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy8xLnN2ZycpIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAuYWxpZ24tY29udGVudC1jZW50ZXIKICAgICAgICAgICAgaDQgQW7DoWxpc2lzIGhvcml6b250YWwKICAgICAgICAgICAgcCBDb21wYXJhIGxvcyBlc3RhZG9zIGZpbmFuY2llcm9zIGRlIGRpc3RpbnRvcyBwZXLDrW9kb3MgcGFyYSBpZGVudGlmaWNhciB0ZW5kZW5jaWFzIHkgY2FtYmlvcyBlbiBlbCBkZXNlbXBlw7FvLgogICAgCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMTYucG5nJywgYWx0PScnKQogICAgCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJBbsOhbGlzaXMgdmVydGljYWwiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzEuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5hbGlnbi1jb250ZW50LWNlbnRlcgogICAgICAgICAgICBoNCBBbsOhbGlzaXMgdmVydGljYWwKICAgICAgICAgICAgcCBFeGFtaW5hIGxhIGVzdHJ1Y3R1cmEgZGUgbG9zIGVzdGFkb3MgZmluYW5jaWVyb3MgZW4gdW4gc29sbyBwZXLDrW9kbywgZXhwcmVzYW5kbyBjYWRhIGN1ZW50YSBjb21vIHVuIHBvcmNlbnRhamUgZGVsIHRvdGFsLCBmYWNpbGl0YW5kbyBsYSBjb21wYXJhY2nDs24gZW50cmUgZW1wcmVzYXMgbyBwZXLDrW9kb3MuCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNy5wbmcnLCBhbHQ9JycpCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTEubWItNQogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE4LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCBBbWJvcyBlbmZvcXVlcyBwcm9wb3JjaW9uYW4gaW5mb3JtYWNpw7NuIGNsYXZlIHBhcmEgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVzdHJhdMOpZ2ljYXMgeSBwZXJtaXRlbiBhbnRpY2lwYXIgb3BvcnR1bmlkYWRlcyBvIHJpZXNnb3MgZmluYW5jaWVyb3MuCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNS5tYi00CiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBBbsOhbGlzaXMgaG9yaXpvbnRhbAogICAgICAgIHAubWItNSBFbCBhbsOhbGlzaXMgaG9yaXpvbnRhbCBlcyB1bmEgdMOpY25pY2EgcXVlIGV2YWzDumEgbGEgZXZvbHVjacOzbiBmaW5hbmNpZXJhIGEgbG8gbGFyZ28gZGVsIHRpZW1wbyBtZWRpYW50ZSBsYSBjb21wYXJhY2nDs24gZGUgY2lmcmFzIGRlIGRpZmVyZW50ZXMgcGVyw61vZG9zLiBGYWNpbGl0YSBsYSBpZGVudGlmaWNhY2nDs24gZGUgdGVuZGVuY2lhcyBkZSBjcmVjaW1pZW50bywgZXN0YWJpbGlkYWQgbyBkZXRlcmlvcm8uIENhcmFjdGVyw61zdGljYXMgZGVsIGFuw6FsaXNpcyBob3Jpem9udGFsOgoKICAgICAgICBkaXYucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE5LnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgUHJpbWVybwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBQZXJtaXRlIGNvbXBhcmFyIGRhdG9zIGZpbmFuY2llcm9zIGRlIGRpc3RpbnRvcyBwZXLDrW9kb3MgcGFyYSBldmFsdWFyIHBhdHJvbmVzIGRlIGRlc2VtcGXDsW8uCiAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzIwLnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgU2VndW5kbwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBJZGVudGlmaWNhIGluY3JlbWVudG9zIG8gcmVkdWNjaW9uZXMgZW4gaW5ncmVzb3MsIGNvc3RvcyB5IHV0aWxpZGFkZXMuCiAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzIxLnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgVGVyY2VybwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBGYWNpbGl0YSBsYSBwbGFuaWZpY2FjacOzbiBlc3RyYXTDqWdpY2EgYWwgcHJldmVyIHRlbmRlbmNpYXMgZnV0dXJhcy4KICAgIAogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIENhc28gZ2VyZW5jaWFsOiBFdmFsdWFjacOzbiBkZSBjcmVjaW1pZW50byBlbiAiU3VwZXJtZXJjYWRvcyDDiXhpdG8iCiAgICBwLm1iLTUgRWwgZ2VyZW50ZSBmaW5hbmNpZXJvIGRlIDxiPlN1cGVybWVyY2Fkb3Mgw4l4aXRvPC9iPiBkZXRlY3RhIHVuIGF1bWVudG8gZW4gbGFzIHZlbnRhcywgcGVybyB0YW1iacOpbiB1biBpbmNyZW1lbnRvIGVuIGxvcyBjb3N0b3Mgb3BlcmF0aXZvcy4gUGFyYSBldmFsdWFyIGVsIGltcGFjdG8sIHNlIHJlYWxpemEgdW4gYW7DoWxpc2lzIGhvcml6b250YWwgZGUgbG9zIMO6bHRpbW9zIHRyZXMgYcOxb3M6CgogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBUYWJsYSAxLgogICAgICBzcGFuIFRhYmxhIGRlIGFuw6FsaXNpcyBob3Jpem9udGFsCiAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcy5tYi01CiAgICAgIHRhYmxlLnRleHQtY2VudGVyCiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTMudGV4dC1jZW50ZXIgQ29uY2VwdG8KICAgICAgICAgICAgdGguYmctY29sb3ItMy50ZXh0LWNlbnRlciBBw7FvIDEgCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTMudGV4dC1jZW50ZXIgQcOxbyAyCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTMudGV4dC1jZW50ZXIgQcOxbyAzCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTMudGV4dC1jZW50ZXIgVmFyaWFjacOzbiAoJSkgCiAgICAgICAgdGJvZHkKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkLnRleHQtYm9sZCBWZW50YXMgbmV0YXMKICAgICAgICAgICAgdGQgMSw1MDAsMDAwCiAgICAgICAgICAgIHRkIDEsODAwLDAwMAogICAgICAgICAgICB0ZCAyLDIwMCwwMDAKICAgICAgICAgICAgdGQgKzQ2LjY3JQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvc3RvIGRlIHZlbnRhcwogICAgICAgICAgICB0ZCA5MDAsMDAwCiAgICAgICAgICAgIHRkIDEsMTAwLDAwMAogICAgICAgICAgICB0ZCAxLDUwMCwwMDAKICAgICAgICAgICAgdGQgKzY2LjY3JQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQudGV4dC1ib2xkIFV0aWxpZGFkIG5ldGEKICAgICAgICAgICAgdGQgMjUwLDAwMAogICAgICAgICAgICB0ZCAyOTAsMDAwCiAgICAgICAgICAgIHRkIDI4MCwwMDAKICAgICAgICAgICAgdGQgLTQlCgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQub3JkZXItbGctMi5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzIyLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLWxnLTEKICAgICAgICAuYmctY29sb3ItNC5wLTUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwIExhIGRlY2lzacOzbiBnZXJlbmNpYWwgZXM6IAogICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci04CiAgICAgICAgICAgICAgcC5tYi0wIEF1bnF1ZSBsYXMgdmVudGFzIGhhbiBhdW1lbnRhZG8gdW4gNDYuNjclLCBsb3MgY29zdG9zIGhhbiBjcmVjaWRvIHVuIDY2LjY3JSwgYWZlY3RhbmRvIGxhIHJlbnRhYmlsaWRhZC4KICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTgKICAgICAgICAgICAgICBwLm1iLTAgU2UgcmVjb21pZW5kYSBtZWpvcmFyIGxhIGVmaWNpZW5jaWEgb3BlcmF0aXZhIG9wdGltaXphbmRvIHByb2Nlc29zIGludGVybm9zIHkgcmVuZWdvY2lhbmRvIGNvbiBwcm92ZWVkb3JlcyBwYXJhIHJlZHVjaXIgY29zdG9zIHNpbiBjb21wcm9tZXRlciBsYSBjYWxpZGFkLgogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOAogICAgICAgICAgICAgIHAubWItMCBFcyBuZWNlc2FyaW8gYW5hbGl6YXIgbG9zIGdhc3RvcyBhZG1pbmlzdHJhdGl2b3MgeSByZWNvcnRhciBwYXJ0aWRhcyBpbm5lY2VzYXJpYXMuCiAgICAKICAgIHAubWItNCBBIGNvbnRpbnVhY2nDs24sIHNlIHByZXNlbnRhIHVuYSBncsOhZmljYSBxdWUgaWx1c3RyYSBsYSBldm9sdWNpw7NuIGRlIGxhcyB2ZW50YXMgbmV0YXMgeSBsb3MgY29zdG9zIGRlIHZlbnRhcyBlbiBsb3Mgw7psdGltb3MgdHJlcyBhw7FvcywgcGVybWl0aWVuZG8gdmlzdWFsaXphciBlbCBpbXBhY3RvIGRlbCBpbmNyZW1lbnRvIGRlIGNvc3RvcyBlbiBsYSByZW50YWJpbGlkYWQKCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IEZpZ3VyYSAxLgogICAgICBzcGFuIENyZWNpbWllbnRvIGRlIHZlbnRhcyB2cy4gY29zdG9zCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUuYmctY29sb3ItOS5wLTUKICAgICAgLmNvbC1sZy02CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yMy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgCgogICAgI3RfMV8zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuM10gQW7DoWxpc2lzIHZlcnRpY2FsCiAgICAKICAgIHAgRWwgYW7DoWxpc2lzIHZlcnRpY2FsIHBlcm1pdGUgZXZhbHVhciBsYSBlc3RydWN0dXJhIGRlIGxvcyBlc3RhZG9zIGZpbmFuY2llcm9zIGVuIHVuIHBlcsOtb2RvIGRldGVybWluYWRvLiBTdSBvYmpldGl2byBlcyBtb3N0cmFyIGxhIHByb3BvcmNpw7NuIGRlIGNhZGEgY3VlbnRhIGRlbnRybyBkZWwgdG90YWwsIGZhY2lsaXRhbmRvIGxhIGNvbXBhcmFjacOzbiBjb24gbG9zIGVzdMOhbmRhcmVzIGRlbCBzZWN0b3IuCgogICAgcC5tYi00IExhcyBjYXJhY3RlcsOtc3RpY2FzIGRlbCBhbsOhbGlzaXMgdmVydGljYWwgc29uOiAKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMjQucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMS5weC01LnB5LTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci04CiAgICAgICAgICAgICAgcC5tYi0wIEV4cHJlc2EgY2FkYSBjdWVudGEgZmluYW5jaWVyYSBjb21vIHVuIHBvcmNlbnRhamUgZGUgdW5hIGNpZnJhIGJhc2U6CiAgICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgICBwLm1iLTAg4pePIEVuIGVsIDxiPmVzdGFkbyBkZSByZXN1bHRhZG9zPC9iPiwgc2UgdXNhIGNvbW8gYmFzZSBsYXMgdmVudGFzIG5ldGFzLgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICAgIHAubWItMCDil48gRW4gZWwgPGI+YmFsYW5jZSBnZW5lcmFsPC9iPiwgc2UgdG9tYW4gY29tbyBiYXNlIGxvcyBhY3Rpdm9zIHRvdGFsZXMuCSAKICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci04CiAgICAgICAgICAgICAgcC5tYi0wIFBlcm1pdGUgaWRlbnRpZmljYXIgY3VlbnRhcyBjb24gdW4gcGVzbyBzaWduaWZpY2F0aXZvIGRlbnRybyBkZSBsYSBlc3RydWN0dXJhIGZpbmFuY2llcmEuCiAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOAogICAgICAgICAgICAgIHAubWItMCBGYWNpbGl0YSBsYSBldmFsdWFjacOzbiBkZSBjb3N0b3MgeSBnYXN0b3MgZW4gY29tcGFyYWNpw7NuIGNvbiBvdHJhcyBlbXByZXNhcyBkZWwgc2VjdG9yLgoKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBDYXNvIGdlcmVuY2lhbC4gRXZhbHVhY2nDs24gZGUgY29zdG9zIGVuICJJbmR1c3RyaWEgVGV4dGlsIFMuQS4iCiAgICBwLm1iLTUgRWwgZ2VyZW50ZSBmaW5hbmNpZXJvIGRlIEluZHVzdHJpYSBUZXh0aWwgUy5BLiBhbmFsaXphIHNpIGxvcyBjb3N0b3Mgb3BlcmF0aXZvcyBlc3TDoW4gYWZlY3RhbmRvIGxhIHJlbnRhYmlsaWRhZCBkZSBsYSBlbXByZXNhLiBQYXJhIGVsbG8sIHNlIHJlYWxpemEgdW4gYW7DoWxpc2lzIHZlcnRpY2FsIGRlbCBlc3RhZG8gZGUgcmVzdWx0YWRvcy4KCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDIuCiAgICAgIHNwYW4gQW7DoWxpc2lzIHZlcnRpY2FsIC0gZXN0YWRvIGRlIHJlc3VsdGFkb3MKICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUKICAgICAgdGFibGUudGV4dC1jZW50ZXIKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItMy50ZXh0LWNlbnRlciBDb25jZXB0bwogICAgICAgICAgICB0aC5iZy1jb2xvci0zLnRleHQtY2VudGVyIE1vbnRvICgkKSAKICAgICAgICAgICAgdGguYmctY29sb3ItMy50ZXh0LWNlbnRlciAlIHNvYnJlIFZlbnRhcyBOZXRhcwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBWZW50YXMgTmV0YXMKICAgICAgICAgICAgdGQgMiwwMDAsMDAwCiAgICAgICAgICAgIHRkIDEwMCUKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIENvc3RvIGRlIFZlbnRhcwogICAgICAgICAgICB0ZCAxLDMwMCwwMDAKICAgICAgICAgICAgdGQgNjUlCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBHYXN0b3MgT3BlcmF0aXZvcwogICAgICAgICAgICB0ZCA1MDAsMDAwCiAgICAgICAgICAgIHRkIDI1JQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgVXRpbGlkYWQgTmV0YQogICAgICAgICAgICB0ZCAyMDAsMDAwCiAgICAgICAgICAgIHRkIDEwJQogICAgCiAgICBwLm1iLTQgTGEgZGVjaXNpw7NuIGdlcmVuY2lhbCBlczogCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNC5tYi0zLnB4LTUucHQtNS5tYi01CiAgICAgIC5weC00LnB4LW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTgoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTMubWItbGctMC5vcmRlci1sZy0yCiAgICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci04CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIFNlIGlkZW50aWZpY2EgcXVlIGxvcyA8Yj5jb3N0b3MgZGUgcHJvZHVjY2nDs24gcmVwcmVzZW50YW4gZWwgNjUlIGRlIGxvcyBpbmdyZXNvczwvYj4sIHN1cGVyYW5kbyBlbCBwcm9tZWRpbyBkZWwgc2VjdG9yICg1MCUpLgogICAgICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTgKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgUGFyYSBtZWpvcmFyIGxhIHJlbnRhYmlsaWRhZCwgc2UgcmVjb21pZW5kYSBpbXBsZW1lbnRhciB1biA8Yj5wbGFuIGRlIGVmaWNpZW5jaWEgcHJvZHVjdGl2YTwvYj4sIHF1ZSBpbmNsdXlhOiAKICAgICAgICAgICAgICAgICAgLnJvdy5tYi0zCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgICAgICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmgtMTAwLnAtMwogICAgICAgICAgICAgICAgICAgICAgICBwLm1iLTAgPGI+T3B0aW1pemFjacOzbiBkZWwgdXNvIGRlIG1hdGVyaWE8L2I+IHByaW1hIHBhcmEgcmVkdWNpciBkZXNwZXJkaWNpb3MuCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgICAgICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmgtMTAwLnAtMwogICAgICAgICAgICAgICAgICAgICAgICBwLm1iLTAgPGI+QXV0b21hdGl6YWNpw7NuIGRlIHByb2Nlc29zPC9iPiBlbiDDoXJlYXMgZG9uZGUgc2UgcHVlZGEgZGlzbWludWlyIGVsIGNvc3RvIGRlIG1hbm8gZGUgb2JyYSBzaW4gYWZlY3RhciBsYSBwcm9kdWNjacOzbi4KICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgICAgICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuaC0xMDAucC0zCiAgICAgICAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5SZXZpc2nDs24gZGUgcHJvdmVlZG9yZXM8L2I+IHBhcmEgbmVnb2NpYXIgbWVqb3JlcyBjb25kaWNpb25lcyBkZSBjb21wcmEuCiAgICAgICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOAogICAgICAgICAgICAgICAgICAgIHAubWItMCBBZGVtw6FzLCBsb3MgPGI+Z2FzdG9zIG9wZXJhdGl2b3MgcmVwcmVzZW50YW4gZWwgMjUlIGRlIGxhcyB2ZW50YXM8L2I+LCBwb3IgbG8gcXVlIHNlIHN1Z2llcmUgZXZhbHVhciBlc3RyYXRlZ2lhcyBwYXJhIHJlZHVjaXIgY29zdG9zIGFkbWluaXN0cmF0aXZvcyBzaW4gYWZlY3RhciBsYSBvcGVyYWNpw7NuLiAKICAgICAgICAgICAgICAuY29sLWxnLTQoZGF0YS1hb3M9Inpvb20taW4iKS5vcmRlci1sZy0xCiAgICAgICAgICAgICAgICBpbWcuaW1nLWZsdWlkKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMjYuc3ZnJywgc3R5bGU9Im1heC13aWR0aDo0ODZweCIsIGFsdD0iIiApLm14LWF1dG8ubXgtbGctMC5tcy1sZy1hdXRvLm1iLTQubWItbGctMAogICAgCiAgICBwLm1iLTQgRWwgYW7DoWxpc2lzIHZlcnRpY2FsIHByb3BvcmNpb25hIHVuYSB2aXNpw7NuIGNsYXJhIGRlIGxhIGVzdHJ1Y3R1cmEgZmluYW5jaWVyYSBkZSBsYSBlbXByZXNhLCBmYWNpbGl0YW5kbyBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcyBwYXJhIG9wdGltaXphciBjb3N0b3MgeSBtZWpvcmFyIGxhIHJlbnRhYmlsaWRhZC4KCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IEZpZ3VyYSAyLgogICAgICBzcGFuIEdyw6FmaWNvIGRlIGRpc3RyaWJ1Y2nDs24gZGUgY29zdG9zIGVuIGVsIGVzdGFkbyBkZSByZXN1bHRhZG9zCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUuYmctY29sb3ItOS5wLTUKICAgICAgLmNvbC1sZy02CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yNy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTEubWItNQogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE4LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCA8Yj5EaXN0cmlidWNpw7NuIGRlIGNvc3RvcyBlbiBlbCBlc3RhZG8gZGUgcmVzdWx0YWRvczo8L2I+IHJlcHJlc2VudGEgZW4gdW4gZ3LDoWZpY28gZGUgcGFzdGVsIGPDs21vIHNlIGRpc3RyaWJ1eWVuIGxvcyBjb3N0b3MgZGUgdmVudGFzLCBnYXN0b3Mgb3BlcmF0aXZvcyB5IHV0aWxpZGFkIG5ldGEgZGVudHJvIGRlIGxvcyBpbmdyZXNvcyB0b3RhbGVzLgoKICAgICN0XzFfNC50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjRdIENvbXBhcmFjacOzbiBlbnRyZSBlbCBBbsOhbGlzaXMgSG9yaXpvbnRhbCB5IFZlcnRpY2FsCiAgICAKICAgIHAubWItNCBBbWJvcyBtw6l0b2RvcyBkZSBhbsOhbGlzaXMgZmluYW5jaWVybyBvZnJlY2VuIHBlcnNwZWN0aXZhcyBkaWZlcmVudGVzIHBlcm8gY29tcGxlbWVudGFyaWFzIHNvYnJlIGxhIHNpdHVhY2nDs24gZWNvbsOzbWljYSBkZSB1bmEgZW1wcmVzYS4KCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDMuCiAgICAgIHNwYW4gRGlmZXJlbmNpYXMgY2xhdmVzCiAgICAKICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUKICAgICAgdGFibGUudGV4dC1jZW50ZXIKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItMy50ZXh0LWNlbnRlciBDYXJhY3RlcsOtc3RpY2EKICAgICAgICAgICAgdGguYmctY29sb3ItMy50ZXh0LWNlbnRlciBBbsOhbGlzaXMgSG9yaXpvbnRhbCAKICAgICAgICAgICAgdGguYmctY29sb3ItMy50ZXh0LWNlbnRlciBBbsOhbGlzaXMgVmVydGljYWwKICAgICAgICB0Ym9keQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQudGV4dC1ib2xkIE9iamV0aXZvCiAgICAgICAgICAgIHRkIEFuYWxpemFyIGxhIGV2b2x1Y2nDs24gZmluYW5jaWVyYSBlbiBlbCB0aWVtcG8uCiAgICAgICAgICAgIHRkIEV2YWx1YXIgbGEgZXN0cnVjdHVyYSBkZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcyBlbiB1biBzb2xvIHBlcsOtb2RvLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvbXBhcmFjacOzbgogICAgICAgICAgICB0ZCBTZSBjb21wYXJhbiBjaWZyYXMgZGUgZGlmZXJlbnRlcyBwZXLDrW9kb3MuCiAgICAgICAgICAgIHRkIFNlIGV4cHJlc2FuIHBhcnRpZGFzIGNvbW8gcG9yY2VudGFqZSBkZSB1bmEgY2lmcmEgYmFzZS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkLnRleHQtYm9sZCBFamVtcGxvIGRlIFVzbwogICAgICAgICAgICB0ZCBFdmFsdWFyIGVsIGNyZWNpbWllbnRvIGRlIGluZ3Jlc29zIHkgY29zdG9zIGVuIGxvcyDDumx0aW1vcyBhw7Fvcy4KICAgICAgICAgICAgdGQgSWRlbnRpZmljYXIgcXXDqSBwcm9wb3JjacOzbiBkZSBsYXMgdmVudGFzIG5ldGFzIHJlcHJlc2VudGEgY2FkYSBjb3N0byB5IGdhc3RvLgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci01Lm1iLTQKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFVzbyBlc3RyYXTDqWdpY28gZGVsIGFuw6FsaXNpcyBmaW5hbmNpZXJvIGVuIGxhIGdlcmVuY2lhCiAgICAgICAgcC5tYi01IEVsIGFuw6FsaXNpcyBob3Jpem9udGFsIHkgdmVydGljYWwgZGUgbG9zIGVzdGFkb3MgZmluYW5jaWVyb3MgZXMgdW5hIGhlcnJhbWllbnRhIGNsYXZlIHBhcmEgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVzdHJhdMOpZ2ljYXMgZW4gbGEgZ2VyZW5jaWEgZmluYW5jaWVyYS4gU3UgY29ycmVjdGEgYXBsaWNhY2nDs24gcGVybWl0ZSBhIGxvcyBkaXJlY3Rpdm9zOgogICAgICAgIAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMjgucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBBbsOhbGlzaXMgaG9yaXpvbnRhbAogICAgICAgICAgICAgICAgcC5tYi0wIElkZW50aWZpY2EgdGVuZGVuY2lhcyBhIGxvIGxhcmdvIGRlbCB0aWVtcG8sIGZhY2lsaXRhbmRvIGRlY2lzaW9uZXMgc29icmUgZXhwYW5zacOzbiwgcmVkdWNjacOzbiBkZSBjb3N0b3MgbyBpbnZlcnNpb25lcyBmdXR1cmFzLgogICAgICAgICAgLmNvbC1sZy02Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzI5LnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgQW7DoWxpc2lzIHZlcnRpY2FsCQogICAgICAgICAgICAgICAgcC5tYi0wIEV2YWzDumEgbGEgZWZpY2llbmNpYSBvcGVyYXRpdmEgZW4gdW4gcGVyw61vZG8gZXNwZWPDrWZpY28sIGRldGVjdGFuZG8gw6FyZWFzIGRlIGFsdG8gY29zdG8gcXVlIHJlcXVpZXJlbiBvcHRpbWl6YWNpw7NuLgogICAgCiAgICBwLm1iLTQgQmVuZWZpY2lvcyBkZWwgYW7DoWxpc2lzIGZpbmFuY2llcm8gZW4gbGEgZ2VyZW5jaWE6IAogICAgICAgICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0yLm1iLTMucHgtNS5wdC01Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctOChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItMy5tYi1sZy0wLm9yZGVyLWxnLTIKICAgICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTgKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgPGI+SWRlbnRpZmljYWNpw7NuIGRlIHRlbmRlbmNpYXMgZmluYW5jaWVyYXM8L2I+IHF1ZSBhZmVjdGFuIGxhIHJlbnRhYmlsaWRhZCB5IHNvc3RlbmliaWxpZGFkIGRlIGxhIGVtcHJlc2EuCiAgICAgICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOAogICAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5FdmFsdWFjacOzbiBkZSBsYSBlZmljaWVuY2lhIG9wZXJhdGl2YTwvYj4gbWVkaWFudGUgdW4gYW7DoWxpc2lzIGRldGFsbGFkbyBkZSBjb3N0b3MgeSBnYXN0b3MuCiAgICAgICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOAogICAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5JbXBsZW1lbnRhY2nDs24gZGUgZXN0cmF0ZWdpYXMgZGUgb3B0aW1pemFjacOzbjwvYj4gcGFyYSBtZWpvcmFyIGxvcyBtw6FyZ2VuZXMgZGUgZ2FuYW5jaWEgeSBsYSBjb21wZXRpdGl2aWRhZCBlbiBlbCBtZXJjYWRvLgogICAgICAgICAgICAKICAgICAgICAgICAgICAuY29sLWxnLTQoZGF0YS1hb3M9Inpvb20taW4iKS5vcmRlci1sZy0xCiAgICAgICAgICAgICAgICBpbWcuaW1nLWZsdWlkKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMzAucG5nJywgc3R5bGU9Im1heC13aWR0aDo0ODZweCIsIGFsdD0iIiApLm14LWF1dG8ubXgtbGctMC5tcy1sZy1hdXRvLm1iLTQubWItbGctMAogICAgCiAgICBwLm1iLTQgRWwgdXNvIGVzdHJhdMOpZ2ljbyBkZWwgYW7DoWxpc2lzIGZpbmFuY2llcm8gcGVybWl0ZSBhIGxhcyBlbXByZXNhcyBtZWpvcmFyIHN1IGdlc3Rpw7NuLCB0b21hciBkZWNpc2lvbmVzIGluZm9ybWFkYXMgeSBmb3J0YWxlY2VyIHN1IHBvc2ljacOzbiBlbiBlbCBtZXJjYWRvLgogICAgICAgIAogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBGaWd1cmEgMy4KICAgICAgc3BhbiBHcsOhZmljbyBDb21wYXJhdGl2byBkZSBSZXN1bHRhZG9zIEFudGVzIHkgRGVzcHXDqXMgZGUgbGEgSW1wbGVtZW50YWNpw7NuIGRlIEVzdHJhdGVnaWFzCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUuYmctY29sb3ItOS5wLTUKICAgICAgLmNvbC1sZy02CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8zMS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCgogICAgcC5tYi00IDxiPkNvbXBhcmFjacOzbiBkZSByZXN1bHRhZG9zIGFudGVzIHkgZGVzcHXDqXMgZGUgbGEgaW1wbGVtZW50YWNpw7NuIGRlIGVzdHJhdGVnaWFzOjwvYj4gcHJlc2VudGEgdW4gYW7DoWxpc2lzIGRlIGPDs21vIGxhIHJlZHVjY2nDs24gZGUgY29zdG9zIHkgbGEgb3B0aW1pemFjacOzbiBvcGVyYXRpdmEgYWZlY3RhbiBsYSBlc3RydWN0dXJhIGZpbmFuY2llcmEgZGUgbGEgZW1wcmVzYSwgYXVtZW50YW5kbyBsYSB1dGlsaWRhZCBuZXRhLiBFbCB1c28gZGUgZXN0YXMgaGVycmFtaWVudGFzIGZpbmFuY2llcmFzIHByb3BvcmNpb25hIHVuYSBiYXNlIHPDs2xpZGEgcGFyYSBsYSBwbGFuaWZpY2FjacOzbiB5IGVqZWN1Y2nDs24gZGUgZXN0cmF0ZWdpYXMgb3JpZW50YWRhcyBhIGxhIDxiPm9wdGltaXphY2nDs24gZGUgY29zdG9zLCBtYXhpbWl6YWNpw7NuIGRlIGJlbmVmaWNpb3MgeSBzb3N0ZW5pYmlsaWRhZCBmaW5hbmNpZXJhIGEgbGFyZ28gcGxhem8uPC9iPgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTMubWItbGctNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTgubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBJbnRlcnByZXRhY2nDs24gZGUgaW5kaWNhZG9yZXMgZGUgbGlxdWlkZXosIHJlbnRhYmlsaWRhZCB5IHNvbHZlbmNpYQogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBMb3MgaW52aXRhbW9zIGEgbGVlciBlbCBkb2N1bWVudG8gPGI+SW50ZXJwcmV0YWNpw7NuIGRlIGluZGljYWRvcmVzIGRlIGxpcXVpZGV6LCByZW50YWJpbGlkYWQgeSBzb2x2ZW5jaWE8L2I+LCBkb25kZSBzZSBkZXRhbGxhbiBoZXJyYW1pZW50YXMgZXNlbmNpYWxlcyBwYXJhIGV2YWx1YXIgbGEgc2FsdWQgZmluYW5jaWVyYSBkZSB1bmEgZW1wcmVzYS4gQSB0cmF2w6lzIGRlIGNhc29zIHByw6FjdGljb3MgeSBlamVtcGxvcyBnZXJlbmNpYWxlcywgZXN0ZSBkb2N1bWVudG8gbGUgcGVybWl0aXLDoSBjb21wcmVuZGVyIGPDs21vIGFuYWxpemFyIGxhIGNhcGFjaWRhZCBkZSB1bmEgb3JnYW5pemFjacOzbiBwYXJhIGN1bXBsaXIgY29uIHN1cyBvYmxpZ2FjaW9uZXMsIGdlbmVyYXIgdXRpbGlkYWRlcyB5IG1hbnRlbmVyIHVuYSBlc3RydWN0dXJhIGZpbmFuY2llcmEgc8OzbGlkYS4KICAgIAogICAgICAgICAgICBhLmFuZXhvLm1iLTQuYmctd2hpdGUudy1maXQoOmhyZWY9Im9idGVuZXJMaW5rKCcvZG93bmxvYWRzL0FuZXhvXzEucGRmJykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXBkZi5zdmciKQogICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgIHAgPHN0cm9uZz5BbmV4by4gPC9zdHJvbmc+IEludGVycHJldGFjacOzbiBkZSBpbmRpY2Fkb3JlcyBkZSBsaXF1aWRleiwgcmVudGFiaWxpZGFkIHkgc29sdmVuY2lhLgogICAgCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8zMi5wbmcnLCBhbHQ9JycpCgoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cuYmJ2YXNwYXJrLmNvbS9jb250ZW5pZG8vZXMvbm90aWNpYXMvYW5hbGlzaXMtZmluYW5jaWVyby1lbXByZXNhcmlhbCIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEJCVkEgU3BhcmsuICgyMDI0KS4gQW7DoWxpc2lzIGZpbmFuY2llcm8gZW1wcmVzYXJpYWw6IMK/cGFyYSBxdcOpIHNpcnZlPy4gQkJWQS4gIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9ibWZzY2hvb2wuY29tLzIwMjQvMDYvMjYvYW5hbGlzaXMtZWNvbm9taWNvLXktZmluYW5jaWVybyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEJNRiBCdXNpbmVzcyBTY2hvb2wuICgyMDI0KS4gQW7DoWxpc2lzIGVjb27Ds21pY28geSBmaW5hbmNpZXJvOiBoZXJyYW1pZW50YXMgeSB0w6ljbmljYXMuIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy5pbmVhZi5lcy90cmlidW5hL2FuYWxpc2lzLXZlcnRpY2FsLXktaG9yaXpvbnRhbC1kZS1sb3MtZXN0YWRvcy1maW5hbmNpZXJvcy1wYXJ0ZS1pLyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIElORUFGIEJ1c2luZXNzIFNjaG9vbC4gKDIwMTkpLiBBbsOhbGlzaXMgdmVydGljYWwgeSBob3Jpem9udGFsIGRlIGxvcyBFc3RhZG9zIEZpbmFuY2llcm9zLiBQYXJ0ZSBJLiAuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05SGh5UnROeFBOQSAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBNaXMgRmluYW56YXMgVS4gKDIwMjAsIDI4IGRlIGFnb3N0bykuIEhlcnJhbWllbnRhcyBkZWwgZGlhZ27Ds3N0aWNvIGZpbmFuY2llcm8gZW4gZXhjZWwuIFtBcmNoaXZvIGRlIHZpZGVvXSBZb3VUdWJlLiAKCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCg=="},null]}